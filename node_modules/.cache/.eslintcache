[{"/Users/leen4k/todolist/todolist-reactjs-x-tailwind/src/index.js":"1","/Users/leen4k/todolist/todolist-reactjs-x-tailwind/src/App.jsx":"2","/Users/leen4k/todolist/todolist-reactjs-x-tailwind/src/Todolist.jsx":"3","/Users/leen4k/todolist/todolist-reactjs-x-tailwind/src/components/DarkMode.jsx":"4"},{"size":257,"mtime":1680167732326,"results":"5","hashOfConfig":"6"},{"size":761,"mtime":1680430235776,"results":"7","hashOfConfig":"6"},{"size":4067,"mtime":1680430538007,"results":"8","hashOfConfig":"6"},{"size":843,"mtime":1680186814466,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1bev13s",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},"/Users/leen4k/todolist/todolist-reactjs-x-tailwind/src/index.js",[],[],"/Users/leen4k/todolist/todolist-reactjs-x-tailwind/src/App.jsx",[],[],"/Users/leen4k/todolist/todolist-reactjs-x-tailwind/src/Todolist.jsx",["24"],[],"import { useState, useEffect } from 'react';\nimport {RxCross1} from \"react-icons/rx\"\nimport {AiFillHeart} from \"react-icons/ai\"\nimport { DarkMode } from './components/DarkMode';\nimport {BiTrash} from \"react-icons/bi\"\nimport {AiOutlinePlus} from \"react-icons/ai\";\n\n\n\nconst getLocalTodos = ()=>{\n  let list = localStorage.getItem('todos');\n  if(list){\n    return JSON.parse(localStorage.getItem(\"todos\"));\n  }else{\n    return [];\n  }\n}\n\n\n\nfunction TodoList({darkMode,setDarkMode}) {\n  const [value, setValue] = useState('');\n  const [todos, setTodos] = useState(getLocalTodos());\n\n\n  useEffect(() => {\n    localStorage.setItem('todos', JSON.stringify(todos));\n  }, [todos]);\n\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    addTodo();\n    setValue('');\n  }\n\n\n  function addTodo() {\n      const newTodo = {\n        time: new Date().toLocaleString(),\n        text: value,\n        completed: false,\n      };\n      setTodos([...todos, newTodo]);  \n  }\n\n  function removeTodo(index) {\n    const newTodos = [...todos];\n    newTodos.splice(index, 1);\n    setTodos(newTodos);\n  }\n\n  return (\n    <div className={`${darkMode?`bg-[#232323]`:`text-blue-500`} w-[90%] h-[100%] p-4 md:w-[60%] lg:w-[50%] flex flex-col justify-center m-auto shadow-lg rounded-lg`}>\n      <h1 className={`${darkMode?\"text-indigo-400\":\"\"} my-6 text-center text-3xl font-bold tracking-tight text-gray-900`}>Todo List</h1>\n      {/* button */}\n      <DarkMode darkMode={darkMode} setDarkMode={setDarkMode} />\n      {/* form */}\n      <form onSubmit={handleSubmit} className=\"flex justify-center gap-2 p-4\">\n      <input\n        placeholder='Enter your TODO'\n        type=\"text\"\n        value={value}\n        onChange={(event) => setValue(event.target.value)}\n        className={`${darkMode?\"bg-indigo-400 text-white placeholder:text-white\":\"text-black\"} block w-full px-2 rounded-lg ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:z-10 focus:ring-2 focus:ring-inset focus:ring-indigo-400 sm:text-sm sm:leading-6`}\n      />\n      <button type=\"submit\" className='group relative justify-center rounded-md bg-indigo-400 px-3 py-3 text-sm font-semibold text-white hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-400'><AiOutlinePlus /></button>\n      <button onClick={()=>setTodos([])} type=\"submit\" className='group relative justify-center rounded-md bg-indigo-400 px-3 py-3 text-sm font-semibold text-white hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-400'><BiTrash /></button>\n    </form>\n      {\n       todos==\"\"? \n      <ul className='w-full flex flex-col justify-center gap-4 my-6 p-4'>\n        <li className={`${darkMode?\"text-white\":\"\"} flex w-full m-auto px-2 justify-between rounded-md border-0 py-1.5 text-slate-400 focus:z-10 focus:ring-2 focus:ring-inset focus:ring-indigo-400 sm:text-sm sm:leading-6`}>Empty tasks here...</li>\n      </ul>\n      :\n      <ul className='w-full flex flex-col justify-center gap-4 my-4 p-4'>\n        {todos.map((todo, index) => (\n          <li key={index}\n              className={`${darkMode?\"text-white\":\"\"} flex w-full m-auto px-2 justify-between rounded-md border-0 py-1.5 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:z-10 focus:ring-2 focus:ring-inset focus:ring-indigo-400 sm:text-sm sm:leading-6`}\n          >\n            \n            <p className='flex justify-center align-center text-center'><AiFillHeart className='text-indigo-500 m-auto mr-2'/>{todo.text}</p> <p className='flex-1 text-right text-slate-400 mr-2'>{todo.time}</p>\n            <button \n            onClick={() => removeTodo(index)}\n            className=\"text-indigo-500\"\n            >\n                <RxCross1 />\n            </button>\n          </li>\n        ))}\n      </ul>\n      }\n      \n      {value?<button onClick={()=>setValue(\"\")} className='bg-indigo-400 text-white p-2 rounded-lg m-4'>Clear All</button>:null}\n    </div>\n  );\n}\n\nexport default TodoList;","/Users/leen4k/todolist/todolist-reactjs-x-tailwind/src/components/DarkMode.jsx",["25","26"],[],"import { useState, useEffect } from 'react';\nimport { Switch } from '@headlessui/react';\n\nfunction DarkMode({darkMode,setDarkMode}) {\n\n  return (\n    <div className={`px-4 ${darkMode ? 'dark' : ''}`}>\n      <Switch\n        checked={darkMode}\n        onChange={setDarkMode}\n        className={`${darkMode ? 'bg-indigo-400' : 'bg-gray-200'}\n          relative inline-flex items-center h-6 rounded-full w-11`}\n      >\n        <span className=\"sr-only\">Enable dark mode</span>\n        <span\n          className={`${darkMode ? 'translate-x-6 transition-all' : 'translate-x-1 transition-all'}\n            inline-block w-4 h-4 transform bg-white rounded-full`}\n        />\n      </Switch>\n      {/* <p className={darkMode?`text-pink-400`:`text-blue-500`}>This text will be styled differently in dark mode.</p> */}\n    </div>\n  );\n}\n\nexport {DarkMode};",{"ruleId":"27","severity":1,"message":"28","line":71,"column":13,"nodeType":"29","messageId":"30","endLine":71,"endColumn":15},{"ruleId":"31","severity":1,"message":"32","line":1,"column":10,"nodeType":"33","messageId":"34","endLine":1,"endColumn":18},{"ruleId":"31","severity":1,"message":"35","line":1,"column":20,"nodeType":"33","messageId":"34","endLine":1,"endColumn":29},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used."]